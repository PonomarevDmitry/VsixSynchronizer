using System;
using System.Runtime.InteropServices;
using System.Text;
using Microsoft.VisualStudio.TextTemplating.VSHost;

namespace VsixSynchronizer
{
    [Guid("62949701-e45c-41fe-8304-eaf34569010d")]
    public sealed class VsixManifestGenerator : BaseCodeGeneratorWithSite
    {
        public const string Name = nameof(VsixManifestGenerator);
        public const string Description = "Generates .NET source code for .vsixmanifest files.";

        public override string GetDefaultExtension() => ".cs";

        protected override byte[] GenerateCode(string inputFileName, string inputFileContent)
        {
            VsixManifest manifest = VsixManifestParser.FromManifest(inputFileContent);
            string code = GenerateClass(manifest);
            return Encoding.UTF8.GetBytes(code);
        }

        private string GenerateClass(VsixManifest manifest)
        {
            var sb = new StringBuilder();
            sb.AppendLine($"// ------------------------------------------------------------------------------");
            sb.AppendLine($"// <auto-generated>");
            sb.AppendLine($"//     This file was generated by {Vsix.Name}");
            sb.AppendLine($"// </auto-generated>");
            sb.AppendLine($"// ------------------------------------------------------------------------------");

            sb.AppendLine($"namespace {FileNamespace}");
            sb.AppendLine("{");
            sb.AppendLine($"    internal sealed partial class Vsix");
            sb.AppendLine($"    {{");
            sb.AppendLine($"        public const string Id = \"{manifest.ID}\";");
            sb.AppendLine($"        public const string Name = \"{manifest.Name?.Replace("\\", "\\\\").Replace("\"", "\\\"")}\";");
            sb.AppendLine($"        public const string Description = @\"{manifest.Description}\";");
            sb.AppendLine($"        public const string Language = \"{manifest.Language}\";");
            sb.AppendLine($"        public const string Version = \"{manifest.Version}\";");
            sb.AppendLine($"        public const string Author = \"{manifest.Author?.Replace("\\", "\\\\").Replace("\"", "\\\"")}\";");
            sb.AppendLine($"        public const string Tags = \"{manifest.Tags?.Replace("\\", "\\\\").Replace("\"", "\\\"")}\";");
            sb.AppendLine($"    }}");
            sb.AppendLine("}");

            return sb.ToString();
        }
    }
}
