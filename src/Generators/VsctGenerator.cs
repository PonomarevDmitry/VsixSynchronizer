using Microsoft.VisualStudio.TextTemplating.VSHost;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Xml;

namespace VsixSynchronizer
{
    [Guid("cffb7601-6a1b-4f28-a2d0-a435e6686a2e")]
    public sealed class VsctGenerator : BaseCodeGeneratorWithSite
    {
        public const string Name = nameof(VsctGenerator);
        public const string Description = "Generates .NET source code for given VS IDE GUI definitions.";

        public override string GetDefaultExtension()
        {
            return ".cs";
        }

        protected override byte[] GenerateCode(string inputFileName, string inputFileContent)
        {
            var guids = ParseVcstFile(inputFileContent);

            var sbGuidsStrings = new StringBuilder();
            var sbGuidsGuids = new StringBuilder();

            var sbIds = new StringBuilder();

            if (guids != null)
            {
                foreach (var guid in guids)
                {
                    if (sbGuidsStrings.Length > 0)
                    {
                        sbGuidsStrings.AppendLine();
                        sbGuidsGuids.AppendLine();
                    }

                    sbGuidsStrings.Append($"        public const string {guid.Name}String = \"{guid.Value}\";");
                    sbGuidsGuids.Append($"        public static readonly System.Guid {guid.Name} = new System.Guid({guid.Name}String);");

                    if (guid.Ids.Any())
                    {
                        if (sbIds.Length > 0)
                        {
                            sbIds.AppendLine();
                            sbIds.AppendLine();
                        }

                        sbIds.AppendLine($"        internal static partial class {guid.Name}");
                        sbIds.Append("        {");

                        foreach (var id in guid.Ids)
                        {
                            sbIds.AppendLine();
                            sbIds.AppendLine($"            public const int {id.Item1} = {ToHex(id.Item2)};");
                        }

                        sbIds.Append("        }");
                    }
                }
            }

            string guidsContent = $@"{sbGuidsStrings}

{sbGuidsGuids}";

            guidsContent = guidsContent.TrimEnd(' ', '\r', '\n');
            string idsContent = sbIds.ToString().TrimEnd(' ', '\r', '\n');

            return GenerateClass(guidsContent, idsContent);
        }

        private byte[] GenerateClass(string guidsContent, string idsContent)
        {
            string template = $@"// ------------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by {Vsix.Name}
// </auto-generated>
// ------------------------------------------------------------------------------
namespace {FileNamespace}
{{
    /// <summary>
    /// Helper static class that exposes all GUIDs used across VS Package.
    /// </summary>
    internal static partial class PackageGuids
    {{
{guidsContent}
    }}

    /// <summary>
    /// Helper static class that encapsulates all CommandIDs uses across VS Package.
    /// </summary>
    internal static partial class PackageIds
    {{
{idsContent}
    }}
}}";

            return Encoding.UTF8.GetBytes(template);
        }

        private class PackageGuid
        {
            public string Name { get; private set; }

            public string Value { get; private set; }

            public List<Tuple<string, string>> Ids { get; private set; }

            public PackageGuid(string name, string value)
            {
                this.Name = name;
                this.Value = value;

                this.Ids = new List<Tuple<string, string>>();
            }
        }

        /// <summary>
        /// Extract GUIDs and IDs descriptions from given XML content.
        /// </summary>
        private static List<PackageGuid> ParseVcstFile(string vsctContentFile)
        {
            List<PackageGuid> result = new List<PackageGuid>();

            var xml = new XmlDocument();
            XmlElement symbols = null;

            try
            {
                xml.LoadXml(vsctContentFile);

                // having XML loaded go through and find:
                // CommandTable / Symbols / GuidSymbol* / IDSymbol*
                if (xml.DocumentElement != null && xml.DocumentElement.Name == "CommandTable")
                {
                    symbols = xml.DocumentElement["Symbols"];
                }
            }
            catch
            {
                return result;
            }

            if (symbols != null)
            {
                XmlNodeList guidSymbols = symbols.GetElementsByTagName("GuidSymbol");

                foreach (XmlElement symbol in guidSymbols)
                {
                    try
                    {
                        // go through all GuidSymbol elements...
                        string name = symbol.Attributes["name"].Value;
                        string value = symbol.Attributes["value"].Value;

                        // preprocess value to remove the brackets:
                        try
                        {
                            value = new Guid(value).ToString("D");
                        }
                        catch
                        {
                            value = "-invalid-";
                        }

                        var guid = new PackageGuid(name, value);

                        result.Add(guid);

                        XmlNodeList idSymbols = symbol.GetElementsByTagName("IDSymbol");
                        foreach (XmlElement i in idSymbols)
                        {
                            try
                            {
                                // go through all IDSymbol elements...
                                guid.Ids.Add(Tuple.Create(i.Attributes["name"].Value, i.Attributes["value"].Value));
                            }
                            catch
                            {
                            }
                        }
                    }
                    catch
                    {
                    }
                }
            }

            return result;
        }

        /// <summary>
        /// Converts given number into hex string.
        /// </summary>
        private static string ToHex(string number)
        {
            if (!string.IsNullOrEmpty(number))
            {
                if (uint.TryParse(number, out uint value))
                {
                    return "0x" + value.ToString("X4");
                }

                if (uint.TryParse(number, NumberStyles.HexNumber, CultureInfo.CurrentCulture, out value))
                {
                    return "0x" + value.ToString("X4");
                }

                if ((number.StartsWith("0x", StringComparison.InvariantCultureIgnoreCase) || number.StartsWith("&H"))
                    && uint.TryParse(number.Substring(2), NumberStyles.HexNumber, CultureInfo.CurrentCulture, out value)
                )
                {
                    return "0x" + value.ToString("X4");
                }
            }

            // parsing failed, return string:
            return number;
        }
    }
}
